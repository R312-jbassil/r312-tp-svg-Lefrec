---
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <div class="flex flex-col h-full glass bg-primary p-8 pt-24 gap-6">
    <div class="flex h-full w-full gap-4">
      <!-- affichage svg -->
      <div
        id="svg-container"
        class="flex items-center justify-center h-full w-full bg-white rounded-lg shadow-md"
      >
      </div>
      <!-- code svg -->
      <div
        id="svg-output"
        class="flex h-full w-full bg-slate-900 rounded-lg text-white shadow-md overflow-hidden"
      >
      </div>
    </div>
    <div class="flex gap-4">
      <!-- prompt input -->
      <textarea
        id="user-prompt"
        class="textarea w-full rounded-lg shadow-md"
        placeholder="Bio"></textarea>
      <!-- button -->
      <button
        id="generate-button"
        class="btn btn-secondary h-full shadow-md min-w-[100px]"
        >Generate</button
      >
      <button id="edit-button" class="btn h-full shadow-md min-w-[100px]"
        >Edit</button
      >
      <button
        id="save-button"
        class="btn btn-secondary h-full shadow-md min-w-[100px]">Save</button
      >
    </div>
  </div>
</Layout>

<script>
  //@ts-nocheck

  let promptList = [];

  async function generateSVG(prompt) {
    console.log("Generating SVG for prompt:", prompt);
    const res = await fetch("/api/generateSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ messages: prompt }),
    });
    const data = await res.json();
    return data.svg;
  }

  async function handleSubmit() {
    let prompt = "";
    let aiResponse = "";
    const promptElement = document.getElementById("user-prompt");
    prompt = promptElement ? promptElement.value : "";
    console.log("submitted: ", prompt);
    // Réinitialiser la liste des prompts
    promptList.length = 0;
    promptList.push({ role: "user", content: prompt });
    const svgContainer = document.getElementById("svg-container");
    // Afficher un spinner
    svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;
    editButton.disabled = true;
    let svgOutput = document.getElementById("svg-output");
    // Appeler la fonction pour générer le SVG
    aiResponse = await generateSVG(promptList);
    // Extraire le SVG de la réponse
    const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
    aiResponse.content = svgMatch ? svgMatch[0] : "";
    console.log("svgCode: ", aiResponse.content);
    // Ajouter la réponse de l'IA à la liste des prompts
    promptList.push(aiResponse);
    // Afficher le SVG généré
    svgOutput.textContent = aiResponse.content;
    svgContainer.innerHTML = aiResponse.content;
    // Réactiver les boutons
    generateButton.disabled = false;
    editButton.disabled = false;
  }

  async function handleEdit() {
    let prompt = "";
    let aiResponse = "";
    const promptElement = document.getElementById("user-prompt");
    prompt = promptElement ? promptElement.value : "";
    console.log("Prompt soumis : ", prompt);
    // Ajout du prompt de l'utilisateur à la liste
    promptList.push({ role: "user", content: prompt });
    const svgContainer = document.getElementById("svg-container");
    // Afficher un spinner de chargement
    svgContainer.innerHTML += `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;
    editButton.disabled = true;
    let svgOutput = document.getElementById("svg-output");
    // Appeler la fonction pour générer le SVG
    aiResponse = await generateSVG(promptList);
    // Extraire le SVG de la réponse
    const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
    aiResponse.content = svgMatch ? svgMatch[0] : "";
    console.log("Code SVG généré : ", aiResponse.content);
    // Ajouter la réponse de l'IA à la liste des prompts
    promptList.push(aiResponse);
    // Afficher le SVG généré
    svgOutput.textContent = aiResponse.content;
    svgContainer.innerHTML = aiResponse.content;
    // Réactiver les boutons
    generateButton.disabled = false;
    editButton.disabled = false;
    console.log("Historique des prompts : ", promptList);
  }

  const saveButton = document.getElementById("save-button");

  async function saveSVG(params) {
    const res = await fetch("/api/saveSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(params),
    });
    const data = await res.json();
    return data;
  }

  if (saveButton) {
    saveButton.addEventListener("click", async () => {
      const name = prompt("Entrez un nom pour le SVG :");
      const svgOutput = document.getElementById("svg-output")?.textContent;
      console.log("Sauvegarde du SVG : ", JSON.stringify(svgOutput));

      const params = {
        name: name,
        code_svg: svgOutput || "<svg></svg>",
        chat_history: JSON.stringify(promptList),
      };
      await saveSVG(params);
    });
  }

  const generateButton = document.getElementById("generate-button");
  if (generateButton) {
    generateButton.addEventListener("click", handleSubmit);
  }
  const editButton = document.getElementById("edit-button");
  if (editButton) {
    editButton.addEventListener("click", handleEdit);
  }
</script>
